apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "mlflow.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ include "mlflow.name" . }}
    helm.sh/chart: {{ include "mlflow.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "mlflow.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "mlflow.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      serviceAccountName: mlflow
      containers:
      - name: oauth-proxy
        image: quay.io/openshift/origin-oauth-proxy:4.8
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8443
        name: public
        args:
        - --https-address=:8443
        - --provider=openshift
        - --openshift-service-account=spark-history-server
        - --upstream=http://localhost:18080
        - --tls-cert=/etc/tls/private/tls.crt
        - --tls-key=/etc/tls/private/tls.key
        - '--openshift-sar={"namespace":"{{ .Release.Namespace }}","resource":"services","name":"{{ include "mlflow.name" . }}","verb":"get"}'
        volumeMounts:
        - mountPath: /etc/tls/private
          name: proxy-tls
        envFrom:
        - secretRef:
            name: oauth-cookie-secret     
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          env:
          - name: BACKEND_STORE_URI
            value: "{{ .Values.db.type }}://{{ .Values.db.user }}:{{ .Values.db.password }}@{{ .Values.db.host }}:{{ .Values.db.port }}/{{ .Values.db.database }}"
          - name: DEFAULT_ARTIFACT_ROOT
            value: {{ .Values.default_artifact_root }}
          - name: MLFLOW_S3_ENDPOINT_URL
            value: {{ .Values.s3.url }}
          # - name: AWS_ACCESS_KEY_ID
          #   value: {{ .Values.s3.accesskey }}
          # - name: AWS_SECRET_ACCESS_KEY
          #   value: {{ .Values.s3.secretkey }}
          envFrom: # includes AWS_ACCESS_KEY_ID && AWS_SECRET_ACCESS_KEY
            - secretRef:
              name: {{ .Values.s3.secret }}
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          # volumeMounts:
          #   - mountPath: "/export"
          #     name: s3
{{- if .Values.volumes }}
{{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      volumes:
{{ toYaml .Values.volumes | indent 6 }}
{{- end }}
